p = 4126366384676271368350036510868591935090023912836473508697222817468119743021120659280904448859582776757406896360220245332458902817060767311003743122761694343696409662310128235313903316585823367714423398622024869694940750875039401939200768112524922978409383170892819207701927619428577855422119325180968009544139734577645858536403068232712783325243838457029285995555603035084439108879902130358005111657669384610573584981892174571923337345119902726213529517821958101358904953650950201949574716395368261086473024044234529317802274998618893055110926076176459831272439715161416713764396688553096705046005846934488188248233145847769875291133071310730935878103561277812462910319528762983483306761570754671364667612144135993548917719328235651239832186072555764097888416190649094046305155577280946267006048767383336889396446146307602214962816552364608051162102603642314264009081812935665441800037337658038716493326604450159016623120268041787744758504941520319503926298210393472678148445842950531956085766503823
q = 4922889305665378382675085896498582483233782291557941050722788383168783550686970277727628084793331239587917426042519794465395804235386828416858587755639283663300928724799772068406898094667305672434348278682176465976917727024614972946301458436369670287649012183659289995850892862568197450354730641788382718501281200022667104949633821429235895176605424530268332679437385981279093341443819062727320569377865200240570390301124644626917046235467969421858744532791386593994452361543545708516921435601675463357814933484126978154457860594616039181734500691999804172862066917544134469439708987332909596761449160922597759838208252322298315469070178175752047786490011483289105607444327363567564504356837846157303495375271084226236121204897269332284218313445622399739314684306494626357665525437414725127708808860650609572039923443672936066747052418833819161376144175423122224801190079525520650253838710869235921610927605120231408998652053180209296513765411337904144844688366757922148461487014156309973044819654231
e = 65537
n = p*q


def to_int(s):
    length = len(s)
    if length % 4 != 0:
        s = (b'\x00'*(4-length % 4)).decode('utf-8')+s
    ret = 0
    for i in range(0, len(s), 4):
        ret = (ret << 32) + int.from_bytes(bytes(s[i:i+4], 'utf-8'), 'big')
    return ret


def to_str(x):
    result = []
    while x > 0:
        result.insert(0, (x & 0xFFFFFFFFFFFFFFFF).to_bytes(8, 'big'))
        x = (x >> 64)
    result[0] = result[0].lstrip(b'\00')
    ret = b''.join(result)
    return(ret.decode('utf-8'))


def extgcd(a, b):
    s = a
    xs = 1
    ys = 0
    t = b
    xt = 0
    yt = 1
    while s % t != 0:
        u = s-t*(s//t)
        xu = xs-xt*(s//t)
        yu = ys-yt*(s//t)
        s, xs, ys = t, xt, yt
        t, xt, yt = u, xu, yu
    return [t, xt, yt]


def lcm(x, y):
    return x*y*extgcd(x, y)[0]


L = lcm(p-1, q-1)


def enc(hirabun):
    return pow(to_int(hirabun), e, n)


def dec(angobun):
    return to_str(pow(angobun, extgcd(e, L)[1] % L, n))


hirabun = '''rsa_ango_dekitango!w'''

angobun = enc(hirabun)
print('暗号文:'+str(angobun))
print('復号:'+dec(angobun))
